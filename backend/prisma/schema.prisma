// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model to store user information
model User {
  id                String              @id @default(uuid())
  walletAddress     String              @unique
  email             String?             @unique
  riskProfile       RiskProfile         @default(MODERATE)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  strategies        Strategy[]
  agentDecisions    AgentDecision[]
  transactions      Transaction[]
}

// Investment strategy model
model Strategy {
  id                String              @id @default(uuid())
  name              String
  description       String?
  objective         String
  riskProfile       RiskProfile
  active            Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  userId            String
  user              User                @relation(fields: [userId], references: [id])
  allocations       Allocation[]
  agentDecisions    AgentDecision[]
  transactions      Transaction[]
}

// Allocation model for strategy asset distribution
model Allocation {
  id                String              @id @default(uuid())
  strategyId        String
  strategy          Strategy            @relation(fields: [strategyId], references: [id])
  chain             Chain
  protocol          String
  asset             String
  percentage        Float
  targetAmount      Float?
  currentAmount     Float?
  apy               Float?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

// Agent decision model to track AI decisions
model AgentDecision {
  id                String              @id @default(uuid())
  userId            String
  user              User                @relation(fields: [userId], references: [id])
  strategyId        String
  strategy          Strategy            @relation(fields: [strategyId], references: [id])
  decisionType      DecisionType
  reasoning         String              @db.Text
  marketData        Json
  action            String
  status            DecisionStatus      @default(PENDING)
  executedAt        DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  transactions      Transaction[]
}

// Transaction model to track on-chain transactions
model Transaction {
  id                String              @id @default(uuid())
  userId            String
  user              User                @relation(fields: [userId], references: [id])
  strategyId        String
  strategy          Strategy            @relation(fields: [strategyId], references: [id])
  agentDecisionId   String?
  agentDecision     AgentDecision?      @relation(fields: [agentDecisionId], references: [id])
  transactionType   TransactionType
  chain             Chain
  protocol          String?
  asset             String
  amount            Float
  txHash            String?
  status            TransactionStatus   @default(PENDING)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

// Market data model to store historical market data
model MarketData {
  id                String              @id @default(uuid())
  chain             Chain
  protocol          String
  asset             String
  apy               Float
  tvl               Float?
  timestamp         DateTime            @default(now())
  source            String
}

// Enums
enum RiskProfile {
  CONSERVATIVE
  MODERATE
  AGGRESSIVE
}

enum Chain {
  ETHEREUM
  AVALANCHE
  BASE
  ARBITRUM
  POLYGON
  OPTIMISM
}

enum DecisionType {
  INITIAL_ALLOCATION
  REBALANCE
  EXIT_POSITION
  ENTER_POSITION
}

enum DecisionStatus {
  PENDING
  EXECUTED
  FAILED
  CANCELLED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  SWAP
  BRIDGE
  STAKE
  UNSTAKE
  LEND
  BORROW
  REPAY
  PROVIDE_LIQUIDITY
  REMOVE_LIQUIDITY
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}
